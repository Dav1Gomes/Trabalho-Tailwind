@inject NavigationManager NavigationManager

<div class="flex items-center justify-between p-4 text-black bg-white bg-opacity-80 backdrop-blur-md shadow-md fixed w-full z-50">
    <div class="cursor-pointer" @onclick="@(() => NavigationManager.NavigateTo("/"))">
        <img src="img/logo-header.png" alt="Boxly Logo" class="h-17 w-50" />
    </div>

    <div class="flex space-x-8 text-black font-bold justify-center items-center">
        <a class="flex items-center space-x-2 hover:text-[#6836c5] transition-colors" href="/">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8"/>
                <path d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
            </svg>
            <span>Home</span>
        </a>

        <a class="flex items-center space-x-2 hover:text-[#6836c5] transition-colors" href="/todos-restaurantes">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="m16 2-2.3 2.3a3 3 0 0 0 0 4.2l1.8 1.8a3 3 0 0 0 4.2 0L22 8"/>
                <path d="M15 15 3.3 3.3a4.2 4.2 0 0 0 0 6l7.3 7.3c.7.7 2 .7 2.8 0L15 15Zm0 0 7 7"/>
                <path d="m2.1 21.8 6.4-6.3"/>
                <path d="m19 5-7 7"/>
            </svg>
            <span>Todos Restaurantes</span>
        </a>

        <a class="flex items-center space-x-2 hover:text-[#6836c5] transition-colors" href="/itens-mais-vendidos">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"/>
            </svg>
            <span>Em alta</span>
        </a>
    </div>

    <div class="flex items-center justify-end space-x-4 min-w-[200px]">
        @if (!MainLayout.UsuarioLogado)
        {
            <button class="bg-[#6836c5] hover:bg-purple-700 text-white font-semibold py-1 px-4 rounded transform hover:scale-105 transition-transform duration-300"
                    @onclick="@(() => NavigationManager.NavigateTo("/login"))">
                Login
            </button>
            <button class="bg-[#6836c5] hover:bg-purple-700 text-white font-semibold py-1 px-4 rounded transform hover:scale-105 transition-transform duration-300"
                    @onclick="@(() => NavigationManager.NavigateTo("/registro"))">
                Registro
            </button>
        }
        else
        {
            <!-- Botão ☰ só quando logado -->
            <button class="text-3xl text-[#6836c5] hover:text-purple-700 transform hover:scale-110 transition-transform duration-300"
                    @onclick="_sidebar.Abrir">
                ☰
            </button>
        }
    </div>

    @if (MensagemLogout != null)
    {
        <div class="fixed bottom-5 right-5 bg-green-500 bg-opacity-90 text-white px-6 py-3 rounded-2xl shadow-lg animate-fade-in-up z-10">
            @MensagemLogout
        </div>
    }
</div>

<Sidebar @ref="_sidebar" />

@code {
    private string? MensagemLogout;
    private Sidebar _sidebar;

    protected override void OnInitialized()
    {
        MainLayout.OnUsuarioLogadoChange += AtualizarHeader;
    }

    private void AtualizarHeader()
    {
        InvokeAsync(StateHasChanged);
    }

    private async void Logout()
    {
        MainLayout.DefinirUsuarioLogado(false);
        NavigationManager.NavigateTo("/");
        MensagemLogout = "Você saiu com sucesso!";
        StateHasChanged();
        await Task.Delay(3000);
        MensagemLogout = null;
        StateHasChanged();
    }
}
